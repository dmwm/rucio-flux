From 3459283c3d3e1db833a44466a23ffc5b30a6ab3a Mon Sep 17 00:00:00 2001
From: Hugo Gonzalez Labrador <github@hugo.labkode.com>
Date: Mon, 9 Sep 2024 10:45:34 +0200
Subject: [PATCH] Transfertool: handle new FTS error message

---
 lib/rucio/transfertool/fts3.py | 11 +++++++----
 1 file changed, 7 insertions(+), 4 deletions(-)

diff --git a/lib/rucio/transfertool/fts3.py b/lib/rucio/transfertool/fts3.py
index f85f70639a..95ac13591e 100644
--- a/lib/rucio/transfertool/fts3.py
+++ b/lib/rucio/transfertool/fts3.py
@@ -109,6 +109,9 @@
 _SCITAGS_EXP_ID = None
 _SCITAGS_ACTIVITY_IDS = {}

+FTS_FILE_EXISTS_ERROR_MSG = 'Destination file exists and is on tape'  # used in FTS  >= 3.12.12
+FTS_FILE_EXISTS_ERROR_MSG_LEGACY = 'Destination file exists and overwrite is not enabled'  # Error message used in FTS < 3.12.12, checked in Rucio for backwards compatibility
+

 def _scitags_ids(logger: "LoggerFunction" = logging.log) -> "tuple[int | None, dict[str, int]]":
     """
@@ -613,9 +616,9 @@ def get_monitor_msg_fields(self, session: "Session", logger: "LoggerFunction" =
     def _transfer_link(self) -> str:
         return '%s/fts3/ftsmon/#/job/%s' % (self._fts_address.replace('8446', '8449'), self._transfer_id)

-    def _find_attribute_updates(self, request: dict, new_state: RequestState, reason: str, overwrite_corrupted_files: Optional[bool] = None) -> Optional[dict[str, Any]]:
+    def _find_attribute_updates(self, request: dict, new_state: RequestState, reason: Optional[str], overwrite_corrupted_files: Optional[bool] = None) -> Optional[dict[str, Any]]:
         attributes = None
-        if new_state == RequestState.FAILED and 'Destination file exists and overwrite is not enabled' in (reason or ''):
+        if new_state == RequestState.FAILED and (reason and any(s in reason for s in (FTS_FILE_EXISTS_ERROR_MSG, FTS_FILE_EXISTS_ERROR_MSG_LEGACY))):
             dst_file = self._file_metadata.get('dst_file', {})
             if self._dst_file_set_and_file_corrupted(request, dst_file):
                 if overwrite_corrupted_files:
@@ -668,7 +671,7 @@ def _dst_file_set_and_file_correct(request: dict, dst_file: dict) -> bool:
         return False

     @classmethod
-    def _is_recoverable_fts_overwrite_error(cls, request: dict[str, Any], reason: str,
+    def _is_recoverable_fts_overwrite_error(cls, request: dict[str, Any], reason: Optional[str],
                                             file_metadata: dict[str, Any]) -> bool:
         """
         Verify the special case when FTS cannot copy a file because destination exists and overwrite is disabled,
@@ -685,7 +688,7 @@ def _is_recoverable_fts_overwrite_error(cls, request: dict[str, Any], reason: st
         dst_type = file_metadata.get('dst_type', None)
         METRICS.counter('overwrite.check.{rsetype}.{rse}').labels(rse=file_metadata["dst_rse"], rsetype=dst_type).inc()

-        if 'Destination file exists and overwrite is not enabled' in (reason or ''):
+        if reason and any(s in reason for s in (FTS_FILE_EXISTS_ERROR_MSG, FTS_FILE_EXISTS_ERROR_MSG_LEGACY)):
             if cls._dst_file_set_and_file_correct(request, dst_file):
                 if dst_type == 'DISK' or dst_file.get('file_on_tape'):
                     METRICS.counter('overwrite.ok.{rsetype}.{rse}').labels(rse=file_metadata["dst_rse"], rsetype=dst_type).inc()
                     